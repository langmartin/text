#+TITLE: What Goes Around Comes Around

* Intro
:PROPERTIES:
:data-background: img/lawn.jpg
:data-state: blur
:END:

- Data model proposals come along regularly
- Often without benefit of hindsight (2020)
- Hence, 35 years of "progress", what should we learn
- Predictions about XML

* Epochs
:PROPERTIES:
:data-background: img/lawn.jpg
:data-state: blur
:END:

- Hierarchical (IMS): late 1960's and 1970's
- Network (CODASYL): 1970's
- Relational: 1970's and early 1980's Entity-Relationship: 1970's
- Extended Relational: 1980's
- Semantic: late 1970's and 1980's
- Object-oriented: late 1980's and early 1990's
- Object-relational: late 1980's and early 1990's

* Meta Lessons
:PROPERTIES:
:data-background: img/golden-arches.jpg
:data-state: blur
:END:

- The market decides, not always wisely

* Terms
:PROPERTIES:
:data-background: img/nicea.jpg
:data-state: blur
:END:

- Physical data independence: the ability to change unindexed data
  storage (like order of records) and run programs written for the old
  data storage layer
- Logical independence: add fields to db records, exclude them for a view

* Hierarchical
:PROPERTIES:
:data-background: img/big-key.jpg
:data-state: blur
:END:

** IMS

- Physical and logical data independence are highly desirable
- Tree structured data models are very restrictive
- It is hard to logically reorganize tree structured data
- Record-at-a-time is hard to hand optimize

* Network
:PROPERTIES:
:data-background: img/bunch-keys.jpg
:data-state: blur
:END:

** CODASYL

- Networks are more flexible than hierarchies but more complex
- Less physically and logically independent
- Loading and recovering networks is harder than hierarchies
  (broken pointers)

* The Great Debate
:PROPERTIES:
:data-background: img/duel.jpg
:data-state: blur
:END:

** Ted Codd

- Relational, set-at-a-time high level languages
- CODASYL is too complex to be good
- Record-at-a-time is too hard to optimize

* The Great Debate
:PROPERTIES:
:data-background: img/duel.jpg
:data-state: blur
:END:

** Charlie Bachman

- COBOL programmers can't understand new things
- Relational model can't be efficient
- Anyway, tables can be built on CODASYL

* Relational
:PROPERTIES:
:data-background: img/rustic-table.jpg
:data-state: blur
:END:

- Set-a-time languages are good, regardless of the data model, since
  they offer much improved physical data independence
- Logical data independence is easier with a simple data model than
  with a complex one
- Query optimizers can beat all but the best record-at-a-time DBMS
  application programmers
- The market: VAX vs mainframe

* Entity-Relationship
:PROPERTIES:
:data-background: img/straw-arrows.jpg
:data-state: blur
:END:

- Introduced without a query language, but boxes & arrows
- Used in schema design tools
- Alternative: normalization
- Functional dependencies are too hard

* R++
:PROPERTIES:
:data-background: img/table-with-stuff.jpg
:data-state: blur
:END:

- Relation + this one thing to solve a problem
- e.g. Gem
  - set values
  - foreign key cascaded dot reference
  - generalization via inheritance
- Unless there is a big performance or functionality advantage, new constructs will go nowhere

* Semantic
:PROPERTIES:
:data-background: img/kitchen-sink.jpg
:data-state: blur
:END:

- Attribute that's a set of records in other classes =country.ships => {}=
- Inverse attributes =ship.country_of_registration=
- Multiple inheritance
- Too easy to simulate on relational systems
- Big vendors focused on transactional performance

* Object Oriented
:PROPERTIES:
:data-background: img/carbonite.jpg
:data-state: blur
:END:

- Motivated by the ORM "impedance mismatch"
- Embedded == limited to the language. Expertise doesn't transfer
- O2 embedded an HLL. Sadly, French
- Packages will not sell to users unless they are in "major pain"
- Persistent languages need support of the programming language community

* Object Relational
:PROPERTIES:
:data-background: img/earth.jpg
:data-state: blur
:END:

- Motivated by Ingress working on GIS queries
- Two benefits:
  - Code in the database
  - User defined types and access methods
- Adoption requires standards and/or an elephant

* XML Predictions
:PROPERTIES:
:data-background: img/crystal-ball.png
:data-state: blur
:END:

- Schema-last is a probably a niche market
- XQuery is pretty much OR SQL with a different syntax
- XML will not solve the semantic heterogeneity either inside or outside the enterprise.

* Full Circle
:PROPERTIES:
:data-background: img/ouroboros.jpg
:data-state: blur
:END:

- Started with complex relationships
- Simple ones were better
- Extensions were not good enough to matter
- OR extensions (user defined functions & types) were performance motivated
- XML is a superset of the union of proposals

* Lessons
:PROPERTIES:
:data-background: img/ouroboros.jpg
:data-state: blur
:END:

"To avoid repeating history, it is always wise to stand on the
shoulders of those who went before, rather than on their feet."

- Code in the database is good
- Schema last is good, but niche

* PS: NoSQL
:PROPERTIES:
:data-background: img/mango.jpg
:data-state: blur
:END:

- Foot standing
- Performance the main hook
- Market lessons again
- Hand-optimizing multi-object lookups is hard
- Migration is hard (schema first + logical independence)

* PPS: Graph Databases
:PROPERTIES:
:data-background: img/spider-man4.jpg
:data-state: blur
:END:

- Developers need a strong incentive to adopt
- Uneven performance changes for different applications
