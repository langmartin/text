#+TITLE: The Power of Two Random Choices
#+DATE: 2000
#+AUTHOR: Michael Mitzenmacher, Andr√©a W. Richa, Ramesh Sitaraman
#+EMAIL: lang.martin@gmail.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:t p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:t todo:t |:t
#+CREATOR: Emacs 25.3.1 (Org mode 8.2.10)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+LANGUAGE: en
#+SELECT_TAGS: export

* Introduction & Overview
** The Paper

- Introduction explains the motivation and technique
- Discussion of mathmatical strategies for evaluating ball & bin
  routing problems to equip future researchers
- Reviews of proofs

** Balls in Bins

- Selecting a bin at random makes the largest bin
  $\log n/\log\log n$
- Pick two buckers, and choose the emptier bin. The largest bin
  is now $\log \log n/\log 2 + \Theta(1)$
- $\log \log n/\log g + \Theta(1)$ in general; more random choices
  provide a linear improvement, but the big reduction in size is
  accomplished by two choices

** Hashing

- Hash table maps the value of the hashing function for the key to a
  list of colliding results (chain)
- Hash by two random functions, choose the shortest chain

** Shared Memory Emulations on DMMs

- Hashing memory addresses distributed across the cluster
- Historically, one of the first applications

** Load Balancing with Limited Information

- Load information can be expensive and/or unavailable
- *Static* balls are added to bins
- *Dynamic* balls are also removed from bins sometimes. usually the
  real world model, messes up the math

* Low Congestion Circuit Routing

** Modeling Techniques We're Skipping

- Layered Induction :: how many bins have more balls? Accurate
     numerically, can describe dynamic systems

- Fluid Limits :: infinite bins, concentrate results to finite
                  application. Very accurate, weak for complex
                  systems, especially with dependencies

** Witness Tree Details

- Inaccurate, strong over complex systems, hairy
- Explict histories $\vec v$ insertions and $\vec w$ deletions,
  applied alternately (to limit balls in play)
- Sticky; if a $v_i$ has been routed before, it's placed in the least
  loaded of the two bins selected the first time
- For an over-full bin, prune the tree of events and find its
  probability

** Congestion Model

- Two-fold butterfly traces a unique path from each input node to each
  output node, and back (like handling a request)
- Valiant reduces congestion by choosing an intermediate node
  uniformly at random, which maps to the balls and bins problem, and
  is $\Theta(\log n/\log\log n)$

** A Thing That Didn't Work

- Randomly choose 2, choose the path with the least congestion
- Congestion is worst at the edges, so we don't improve much
- Traversing from input to the half way point, flip a coin to choose
  either the forward edge or the cross edge at each node. The random
  choices start close to the input
- From the half way point $d$ where $d = \log n$, flip the path $p$
  with it's /buddy/ $p'$ the same way
