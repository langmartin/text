#+TITLE: The Power of Two Random Choices
#+DATE: <2018-03-30 Fri>
#+AUTHOR: Lang Martin
#+EMAIL: lang.martin@gmail.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:t p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:t todo:t |:t
#+CREATOR: Emacs 25.3.1 (Org mode 8.2.10)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+LANGUAGE: en
#+SELECT_TAGS: export

* The Power of Two Random Choices
** The Paper

- Introduction explains the motivation and technique
- Discussion of mathmatical strategies for evaluating ball & bin
  routing problems to equip future researchers
- Reviews of proofs

** Balls in Buckets

- Selecting a bucket at random makes the largest bucket
  $\log n/\log\log n$
- Pick two buckers, and choose the emptier bucket. The largest bucket
  is now $\log \log n/\log 2 + \Theta(1)$
- 2 is $d$ in general, more random choices provide a linear
  improvement, but the big reduction in size is accomplished by two
  choices

** Hashing

- Hash table maps the value of the hashing function for the key to a
  list of colliding results (chain)
- Hash by two random functions, choose the shortest chain

** Shared Memory Emulations on DMMs

- Hashing memory addresses distributed across the cluster
- Historically, one of the first applications

** Load Balancing with Limited Information

- Load information can be expensive and unavailable
- Static :: balls are added to buckets
- Dynamic :: balls are also removed from buckets sometimes

Dynamic case models load balancing, and complicates the math

* Low Congestion Circuit Routing

** Modeling Tecnniques in the Paper

- Layered Induction :: when I add to a bucket, how many have more
     balls?
- Witness tree :: model balls entering the system. Directly model
                  deletions for the dynamic model
- Fluid Limits :: bins to infinity, concentrate results to finite
                  application

** Witness Tree Details

- Explict histories of $\vec v$ insertions and $\vec w$ deletions,
  applied alternately (to limit balls in play)
- Sticky; if a $v_i$ has been routed to a bin before, it's placed in
  the least loaded of the two bins selected the first time
- Pruned to unique bins and mappings of balls to bin choices
- Rebalancing provides no extra benefit
- Proof that in general this is the best we can do for maximum load

** Congestion Model

- Two-fold butterfly traces a unique path from each input node to each
  output node, and back (like handling a request)
- Valiant reduces congestion by choosing an intermediate node
  uniformly at random, which maps to the balls and bins problem, and
  is $\Theta(\log n/\log\log n)$

** A Thing That Didn't Work

- Randomly choose 2, choose the path with the least congestion
- Congestion is worst at the edges, so we don't improve much
-
